server.port=${APP_PORT:8081}

spring.datasource.url=jdbc:postgresql://${URL_DATABASE:localhost:5433/proposal}
spring.datasource.username=${USER_DATABASE:postgres}
spring.datasource.password=${PASSWORD_DATABASE:docker}

spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1

spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=update
spring.jpa.hibernate.naming-strategy=org.hibernate.cfg.ImproveNamingStrategy
spring.jpa.properties.hibernate.dialetc=org.hibernate.dialect.PostgreSQLDialect

feign.client.config.nomeFeignClienteDefinidoNoBean.read-timeout=100
feign.client.config.nomeFeignClienteDefinidoNoBean.connect-timeout=100

# Actuator
#management.endpoints.enabled-by-default=false
management.endpoint.info.enabled=true
management.endpoint.health.enabled=true
management.endpoints.prometheus.enabled=true
management.endpoints.web.exposure.include=info,health,prometheus
# apenas modo dev
management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true

info.app.name=@project.name@
info.app.description=@project.description@
info.app.version=@project.version@
info.app.encoding=@project.build.sourceEncoding@
info.app.java.version=@java.version@

# Variáveis de ambiente
frequency.execute.operation=${FREQUENCY_EXECUTE_OPERATION:60000}

external.api.accounts=${URL_API_ACCOUNTS:http://localhost:8888}
external.api.solicitation=${URL_API_SOLICITATION:http://localhost:9999}

## spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/proposals}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/proposals/protocol/openid-connect/certs}

# Prometheus
management.metrics.tags.application=${APP_NAME:proposalsService}
management.metrics.tags.environment=${ENVIRONMENT:development}

# Jaeger - Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}

# Jaeger - Nome do serviço
opentracing.jaeger.service-name=proposal

# Jaeger - Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}

# Jaeger - Tipo de amostragem (probabilístico) e sua configuração (1 = 100%)
opentracing.jaeger.probabilistic-sampler.sampling-rate=${JAEGER_SAMPLER:1}

# True para enviar 100%
opentracing.jaeger.const-sampler.decision=${JAEGER_SAMPLER:true}

# Para enviar 10 traces por segundo
opentracing.jaeger.rate-limiting-sampler.max-traces-per-second=${JAEGER_SAMPLER:10}
